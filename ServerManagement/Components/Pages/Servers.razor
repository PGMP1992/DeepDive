@page "/servers"
@page "/servers/back_from/{cityName}"
@inject NavigationManager _nav
@inject TorontoServersStore _torontoServersStore
@rendermode InteractiveServer 

<h3>Servers</h3>
<br />

@* // City Buttons ---------- *@
<CityListComponent 
    @ref="cityListComponent"
    OnCitySelectedCallBack="HandleCitySelection"
    selectedCity="@selectedCity">
</CityListComponent>
<br />

@* // Search Bar using two bidding ------------------- *@
@* Using ExtraAttributes to pass in the style attribute defined in Child Component   
    @attributes="ExtraAttributes" ==> "style="width:70%" *@
<SearchBarComponent 
@ref="searchBarComponent"
SearchServerCallBack="HandleSearchServer">
</SearchBarComponent>
<br />

@* // Servers ---------- *@
<CascadingValue Value="@selectedCity" Name="SelectedCity">
    <ServerListComponent 
        @rendermode="InteractiveServer" 
        CityName="@selectedCity" 
        SearchFilter="@searchFilter">
    </ServerListComponent>
</CascadingValue>
<br />

<br />
<a href="/server" class="btn btn-primary">Add Server</a>


@code {
    [Parameter]
    public string? cityName { get; set; } // This is the parameter passed from the URL

    [Parameter]
    public string selectedCity { get; set; } = "Toronto";

    private string searchFilter = "";
    private CityListComponent? cityListComponent;
    private SearchBarComponent? searchBarComponent;

    private void HandleCitySelection(string cityName)
    {
        selectedCity = cityName;
        searchFilter = string.Empty;
        searchBarComponent?.ClearFilter();
    }

    private void HandleSearchServer(string filter)
    {
        searchFilter = filter;
        cityListComponent?.ClearSelection();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (_nav.Uri.Contains("back_from") 
                && !string.IsNullOrWhiteSpace(cityName))
            {
                selectedCity = cityName;
                StateHasChanged();
            }
            var serversToronto = ServersRepos.GetServersByCity("Toronto");
            if( serversToronto is not null)
            {
                _torontoServersStore.SetServersOnline( serversToronto.Count( x => x.IsOnline ));
            }
        }
    }
}
