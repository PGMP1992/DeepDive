@page "/server/{id:int?}"
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager _nav
@inject IServerRepos _serverRepos
@attribute [Authorize(Policy = "Manager")]

@if(Id.HasValue) { <h3>Edit Server</h3> }
else { <h3>Add Server</h3> }

@if (server != null)
{
    <EditForm Model="server" FormName="formServer" OnValidSubmit="Submit">
        <DataAnnotationsValidator />
        @* <ValidationSummary /> *@
        @if (server.Id > 0)
        {
            <InputNumber @bind-Value="server.Id" class="form-control" hidden />
        }
        <FieldComponent Label="Name">
            <Control>
                <InputText @bind-Value="server.Name" class="form-control"></InputText>
                <ValidationMessage For="() => server.Name"></ValidationMessage>
            </Control>
        </FieldComponent>

        <FieldComponent Label="City">
            <Control>
                <InputText @bind-Value="server.City" class="form-control"></InputText>
                <ValidationMessage For="() => server.City"></ValidationMessage>
            </Control>
        </FieldComponent>

        <FieldComponent Label="Online">
            <Control>
                <InputCheckbox @bind-Value="server.IsOnline" class="form-check-input"></InputCheckbox>
            </Control>
        </FieldComponent>

        @* <div class="btn-group mt-3">
            @if (server.Id > 0 )
            {
                <button type="submit" class="btn btn-primary">Update</button>
            }
            else
            {
                <button type="submit" class="btn btn-primary">Add</button>
            }
            <a href="/servers" class="btn btn-outline-dark">Back</a>
        </div> *@
        <div class="border-top" />
        <ButtonGroup 
            Button1="Save"
            Button2="Close" Button2Ref="/servers/add">
            <p> This was not supposed to be here </p>
        </ButtonGroup>
    </EditForm>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    [SupplyParameterFromQuery]
    public string? FromQueryCity { get; set; }

    [SupplyParameterFromForm]
    private Server? server { get; set; }

    protected override void OnParametersSet()
    {
        if (Id.HasValue)
            server ??= _serverRepos.GetById(Id.Value);
        else
            server ??= new Server() { IsOnline = false };

        if (server is not null && !string.IsNullOrEmpty(FromQueryCity))
        {
            server.City = FromQueryCity;
        }
    }

    private async Task Submit()
    {
        if (server is not null)
        {
            if (Id.HasValue)
                _serverRepos.Update(server.Id, server);
            else
                _serverRepos.Add(server);
            
            _nav.NavigateTo($"/servers/back_from/{server?.City}", true);
        }
    }
}
