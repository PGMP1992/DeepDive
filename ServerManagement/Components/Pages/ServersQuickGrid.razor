@page "/servers/quickgrid"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@inject NavigationManager _nav
@inject IServerRepos _serverRepos 
@attribute [Authorize]

@rendermode InteractiveServer

<h1>Servers Grid</h1>
<br />

@if( servers != null) 
{
    <QuickGrid items="servers.AsQueryable()" Pagination="paginationState">
        <PropertyColumn Property="s => s.Name" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="s => s.City" Sortable="true"></PropertyColumn>

        <TemplateColumn Title="Status" 
            Sortable="true" 
            SortBy="GridSort<Server>.ByAscending(s => s.IsOnline)">
            @if (context.IsOnline)
            {
                <div style="color:green">
                    Online
                </div>
            }
            else
            {
                <div style="color:red">
                    Offline
                </div>
            }
        </TemplateColumn>

        <TemplateColumn Title="People Online"
            Sortable=" true">
            @if (context.IsOnline)
            {
                Random random = new Random();
                int randomNumber = random.Next(0, 500);
                <text>@randomNumber</text>
            }
            else
            {
                <text>N/A</text>
            }
        </TemplateColumn>

        <TemplateColumn>
            @if (context.IsOnline)
            {
                <button type="button" class="btn btn-outline-danger"
                    @onclick="@(()=> {context.IsOnline = false;})">
                    Turn Off
                </button>
            }
            else
            {
                <button type="button" class="btn btn-outline-success"
                    @onclick="@(()=> {context.IsOnline = true;})">
                    Turn On
                </button>
            }
        </TemplateColumn>

        <TemplateColumn>
            <a href="/servers/@context.Id" class="btn btn-outline-primary">Edit</a>
        </TemplateColumn>

        <TemplateColumn>
            <ChildContent Context="server">
                <EditForm Model="server"
                FormName="@($"form-Server-{server.Id}")"
                OnValidSubmit="@(() => { DeleteServer(server.Id); })">
                    <button type="submit" class="btn btn-primary">Delete</button>
                </EditForm>
            </ChildContent>
        </TemplateColumn> 

    </QuickGrid>
    <Paginator State="paginationState" />
}
else
{
    <h1 class="text-danger">No Servers Found!</h1>
}

@code {
    private List<Server>? servers;
    private PaginationState paginationState = new PaginationState{ItemsPerPage= 10 };

    protected override void OnInitialized()
    {
        servers = _serverRepos.GetAll();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) 
            servers = _serverRepos.GetAll();
    }
    

    private void DeleteServer(int Id)
    {
        if (Id > 0)
        {
            _serverRepos.Delete(Id);
            //servers = ServersRepos.GetServers();
            _nav.NavigateTo("/servers/quickgrid", true);
        }
    }
}
