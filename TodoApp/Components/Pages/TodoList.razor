@page "/todolist"  
@rendermode InteractiveServer
<h3>Todo </h3>

<br />

@* <div class="input-group mb-2">
    <input type="text" class="form-control" placeholder="Add Todo" @bind="todoName" />
    <button class="btn btn-outline-secondary" type="button" @onclick="() => AddTodo">
        Add
    </button>
</div> *@

<button type="button"
    class="btn btn-primary mb-3"
    @onclick="AddTodo">
    Add Task
</button>

@if(items != null && items.Count > 0) { 
    <ul class="list-unstyled">
        <ItemsListComponent Items = "items"  />
    </ul>
}
else
{
    <p>No items found</p>
}

@code {
    private List<ToDoItem> items = TodoItemsRepos.GetItems();
    //private string todoName = string.Empty;
    private bool isAllSelected = false;
    
    // private void AddTodo(string name)
    // {
    //     if (!string.IsNullOrWhiteSpace(name))
    //     {
    //         TodoItemsRepos.AddItem(new ToDoItem { Name = name });
    //         items = TodoItemsRepos.GetItems();
    //     }
    // }

    private void AddTodo()
    {
        TodoItemsRepos.AddItem(new ToDoItem { Name = "New Task" });
        items = TodoItemsRepos.GetItems();
    }

    private void DeleteTodo(int id)
    {
        TodoItemsRepos.DeleteItem(id);
    }
    
    private void ToggleSelectAll()
    {
        isAllSelected = !isAllSelected;
        
        foreach (var todo in items)
        {
            todo.IsCompleted = isAllSelected;
        }
    }
    
    private void SetCompleted(ChangeEventArgs e, ToDoItem item)
    {
        item.IsCompleted = (bool)e.Value;
        if (item.IsCompleted)
        {
            item.DateCompleted = DateTime.Now;
        }
        else
        {
            item.DateCompleted = default(DateTime);
        }
    }
}
